agg <- create_output(out, residuals = residuals, nsims = nsims)
#for(i in 1:legnth(reps))
#{
# Object = get("reps")
# Object[1] = 0
assign(paste0(reps, "add"), add , envir = .GlobalEnv)
x<-assign(paste0(reps, "out"), out , envir = .GlobalEnv)
y <- assign(paste0(reps, "agg"), agg , envir = .GlobalEnv)
#  }
sink("F:/patrice_dissertation/Results.txt", append = TRUE)
return(agg)
sink(file = NULL)
#unlink("F:/patrice_dissertation/Results.txt")
#list(x,y,z)
}
results("F:/patrice_dissertation/Study1/Cubic/n30/150t/difuse/high/output", file_filter = ".txt", nsims = 800)
install.packages("rlang")
results("F:/patrice_dissertation/Study1/Cubic/n30/150t/difuse/high/output", file_filter = ".txt", nsims = 800)
install.packages("rlang")
install.packages("rlang")
results <- function (target = getwd(), rep_filter = "rep", recursive = FALSE, file_filter = "difuse",
residuals, nsims=NULL)
# residuals = "high" or "low"
# nsims = number of simulations
{
## Check if tidiverse is installed and loaded
packages <- c("tidyverse")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
## Determine whether target is a file or a directory
if (file.exists(target)) {
if (file.info(target)$isdir == TRUE) {
## List all files in directory
files <- list.files(target, recursive=recursive, full.names=TRUE)
## Select files for the correct cell of the simulation (based on file_filter)
cell <- files[str_which(files, file_filter)]
## Select only .out files
files <- cell[str_which(cell, ".out")]
}
else {
## If target is a single output file.
if (nchar(target) >= 4 && !substr(target, nchar(target) - 3, nchar(target)) == ".out")
stop("Specified target is not an output file.\n  Target:", target)
## Assign single file to files
files <- target
}
}
## If neither
else stop("Specified target does not exist.\n  Target: ", target)
if (length(files) == 0) {
warning("No output files detected in this directory.")
return(NULL)
}
## Split each file name in 2 after the rep_filter term, save what comes after
reps <- str_split_fixed(files, "/output/", n=2)[,2]
## Split each file name in 2 after the rep_filter term, save what comes after
reps <- str_split_fixed(reps, rep_filter, n=2)[,1][1]
if (length(nsims) == 0) {
nsims <- length(reps)
#  else { nsims<- nsims
#  }
}
add <- get_admissible(target = target, file_filter = file_filter, rep_filter = rep_filter, recursive = recursive,silent=TRUE)
out<-readModels(target = target, recursive = recursive, quiet = TRUE)
agg <- create_output(out, residuals = residuals, nsims = nsims)
#for(i in 1:legnth(reps))
#{
# Object = get("reps")
# Object[1] = 0
assign(paste0(reps, "add"), add , envir = .GlobalEnv)
x<-assign(paste0(reps, "out"), out , envir = .GlobalEnv)
y <- assign(paste0(reps, "agg"), agg , envir = .GlobalEnv)
#  }
sink("F:/patrice_dissertation/Results.txt", append = TRUE)
return(agg)
sink(file = NULL)
#unlink("F:/patrice_dissertation/Results.txt")
#list(x,y,z)
}
install.packages("rlang")
remove.packages(rlang, "C:/Users/Maintainer/Documents/R/win-library/3.4")
remove.packages(rlang, "C:/Users/Maintainer/AppData/Local/Temp/RtmporyiAS/downloaded_packages")
library("tidyverse", lib.loc="~/R/win-library/3.4")
results("F:/patrice_dissertation/Study1/Cubic/n30/150t/difuse/high/output", file_filter = ".txt", nsims = 800)
results <- function (target = getwd(), rep_filter = "rep", recursive = FALSE, file_filter = "difuse",
residuals, nsims=NULL)
# residuals = "high" or "low"
# nsims = number of simulations
{
## Check if tidiverse is installed and loaded
#packages <- c("tidyverse")
#package.check <- lapply(packages, FUN = function(x) {
#if (!require(x, character.only = TRUE)) {
#install.packages(x, dependencies = TRUE)
#library(x, character.only = TRUE)
#}
#})
## Determine whether target is a file or a directory
if (file.exists(target)) {
if (file.info(target)$isdir == TRUE) {
## List all files in directory
files <- list.files(target, recursive=recursive, full.names=TRUE)
## Select files for the correct cell of the simulation (based on file_filter)
cell <- files[str_which(files, file_filter)]
## Select only .out files
files <- cell[str_which(cell, ".out")]
}
else {
## If target is a single output file.
if (nchar(target) >= 4 && !substr(target, nchar(target) - 3, nchar(target)) == ".out")
stop("Specified target is not an output file.\n  Target:", target)
## Assign single file to files
files <- target
}
}
## If neither
else stop("Specified target does not exist.\n  Target: ", target)
if (length(files) == 0) {
warning("No output files detected in this directory.")
return(NULL)
}
## Split each file name in 2 after the rep_filter term, save what comes after
reps <- str_split_fixed(files, "/output/", n=2)[,2]
## Split each file name in 2 after the rep_filter term, save what comes after
reps <- str_split_fixed(reps, rep_filter, n=2)[,1][1]
if (length(nsims) == 0) {
nsims <- length(reps)
#  else { nsims<- nsims
#  }
}
add <- get_admissible(target = target, file_filter = file_filter, rep_filter = rep_filter, recursive = recursive,silent=TRUE)
out<-readModels(target = target, recursive = recursive, quiet = TRUE)
agg <- create_output(out, residuals = residuals, nsims = nsims)
#for(i in 1:legnth(reps))
#{
# Object = get("reps")
# Object[1] = 0
assign(paste0(reps, "add"), add , envir = .GlobalEnv)
x<-assign(paste0(reps, "out"), out , envir = .GlobalEnv)
y <- assign(paste0(reps, "agg"), agg , envir = .GlobalEnv)
#  }
sink("F:/patrice_dissertation/Results.txt", append = TRUE)
return(agg)
sink(file = NULL)
#unlink("F:/patrice_dissertation/Results.txt")
#list(x,y,z)
}
results("F:/patrice_dissertation/Study1/Cubic/n30/150t/difuse/high/output", file_filter = ".txt", nsims = 800)
library("tidyverse", lib.loc="~/R/win-library/3.4")
results("F:/patrice_dissertation/Study1/Cubic/n30/150t/difuse/high/output", file_filter = ".txt", nsims = 800)
library("tidyverse", lib.loc="~/R/win-library/3.4")
library("tidyselect", lib.loc="~/R/win-library/3.4")
install.packages("rlang")
results <- function (target = getwd(), rep_filter = "rep", recursive = FALSE, file_filter = "difuse",
residuals, nsims=NULL)
# residuals = "high" or "low"
# nsims = number of simulations
{
## Check if tidiverse is installed and loaded
packages <- c("tidyverse")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
## Determine whether target is a file or a directory
if (file.exists(target)) {
if (file.info(target)$isdir == TRUE) {
## List all files in directory
files <- list.files(target, recursive=recursive, full.names=TRUE)
## Select files for the correct cell of the simulation (based on file_filter)
cell <- files[str_which(files, file_filter)]
## Select only .out files
files <- cell[str_which(cell, ".out")]
}
else {
## If target is a single output file.
if (nchar(target) >= 4 && !substr(target, nchar(target) - 3, nchar(target)) == ".out")
stop("Specified target is not an output file.\n  Target:", target)
## Assign single file to files
files <- target
}
}
## If neither
else stop("Specified target does not exist.\n  Target: ", target)
if (length(files) == 0) {
warning("No output files detected in this directory.")
return(NULL)
}
## Split each file name in 2 after the rep_filter term, save what comes after
reps <- str_split_fixed(files, "/output/", n=2)[,2]
## Split each file name in 2 after the rep_filter term, save what comes after
reps <- str_split_fixed(reps, rep_filter, n=2)[,1][1]
if (length(nsims) == 0) {
nsims <- length(reps)
#  else { nsims<- nsims
#  }
}
add <- get_admissible(target = target, file_filter = file_filter, rep_filter = rep_filter, recursive = recursive,silent=TRUE)
out<-readModels(target = target, recursive = recursive, quiet = TRUE)
agg <- create_output(out, residuals = residuals, nsims = nsims)
#for(i in 1:legnth(reps))
#{
# Object = get("reps")
# Object[1] = 0
assign(paste0(reps, "add"), add , envir = .GlobalEnv)
x<-assign(paste0(reps, "out"), out , envir = .GlobalEnv)
y <- assign(paste0(reps, "agg"), agg , envir = .GlobalEnv)
#  }
sink("F:/patrice_dissertation/Results.txt", append = TRUE)
return(agg)
sink(file = NULL)
#unlink("F:/patrice_dissertation/Results.txt")
#list(x,y,z)
}
results("F:/patrice_dissertation/Study1/Cubic/n30/150t/difuse/high/output", file_filter = ".txt", nsims = 800)
## #########################################################################
## Function: get_admissible
## Functionality: find rep numbers of Mplus output files that do not
## contain any inadmissible warnings and categorize which warnings are
## observed.
##
## Input: file_filter - a single string to identify relevant output files
##                      (the function already selects only .out files, so
##                      this needs to be a different string)
##         rep_filter - a single string to identify the last string in a
##                      file name before the rep number occurs.
##                      Default = rep
##           warnings - warning keywords to search for. Function comes with
##                      a default set of warning keywords to search for,
##                      see Word Doc "Default Warning Keywords"
## Output:       list - admissible: numeric vector of admissible
##                      replication numbers
##                      which_warnings: tibble with warning keywords
##                      and number of occurances
############################################################################
get_admissible <- function(target = getwd(), file_filter, rep_filter = "rep", warnings = "default",
recursive = FALSE, move = TRUE, silent=TRUE) {
## Check if tidiverse is installed and loaded
packages <- c("tidyverse", "fs")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
## Check if file filter is one string
if (length(file_filter) > 1) {stop("Error: Your file filter contains more than one term.")}
## If warnings are set to default, assign default warning key words
if (warnings == "default") {
warnings <- c("AVOID SINGULARITY", "NON-POSITIVE DEFINITE",
"WAS NOT REPLICATED", "NOT POSITIVE DEFINITE",
"SADDLE POINT", "CONVERGENCE CRITERION IS NOT SATISFIED")
}
## Create data frame for which_warnings overview
warnings_frame <- tibble(warning = warnings,
freq = rep(0, length(warnings)))
## Determine whether target is a file or a directory
if (file.exists(target)) {
if (file.info(target)$isdir == TRUE) {
## List all files in directory
files <- list.files(target, recursive=recursive, full.names=TRUE)
## Select files for the correct cell of the simulation (based on file_filter)
#cell <- files[grep(file_filter, files, invert = TRUE)]
## Select only .out files
files <- files[grep(file_filter, files, invert = TRUE)] #files[str_which(cell, ".out")]
files <- files[str_which(files, ".out")]
}
else {
## If target is a single output file.
if (nchar(target) >= 4 && !substr(target, nchar(target) - 3, nchar(target)) == ".out")
stop("Specified target is not an output file.\n  Target:", target)
## Assign single file to files
files <- target
}
}
## If neither
else stop("Specified target does not exist.\n  Target: ", target)
if (length(files) == 0) {
warning("No output files detected in this directory.")
return(NULL)
}
## Split each file name in 2 after the rep_filter term, save what comes after
reps <- str_split_fixed(files, rep_filter, n=2)[,2]
## Split each remaining string at the ".out" point, save what comes before
## as a numeric value (these are the rep numbers)
reps <- as.numeric(str_split_fixed(reps, ".out", n=2)[,1])
## Create a vector to house the admissible rep numbers and names, and not admissble rep numbers
admissible <- vector()
admissible_name <- vector()
not_admissible <- vector()
not_admissible_name <- vector()
## Create a progress bar
pb <- winProgressBar(title = "progress bar", min = 0,
max = length(files), width = 300)
## For each file
for (i in 1:length(files)) {
## Read in the lines of the file
output <- read_lines(files[i])
## Save the rep number
rep_number <- reps[i]
## Search for the warning key words in the .out file and save the lines that
## contain warning messages
warning_string <- output[str_which(output, paste(warnings, collapse = '|'))]
## If no warning_string was found
if (length(warning_string) == 0) {
## Add rep_number to admissible vector
admissible <- c(admissible, rep_number)
## Add file name to admissible_name vector
admissible_name <- c(admissible_name, files[i])
## else
} else {
## Add rep_number to not_admissible vector
not_admissible <- c(not_admissible, rep_number)
## Add file name to admissible_name vector
not_admissible_name <- c(not_admissible_name, files[i])
## For each warning key word in the warnings_frame
for (j in 1:nrow(warnings_frame)) {
## Set occurance of warning to zero
occur <- 0
## If that specific warning is found in the output,
## change occur to 1
if (length(str_which(output, paste(warnings_frame$warning[j]))) > 0) occur <- 1
## Update the counter for that warning by adding either 1 or 0 to it
warnings_frame[j,2] <- warnings_frame[j,2] + occur
}
}
## Initialize progress bar
setWinProgressBar(pb, i, title=paste( round(i/length(files)*100, 0),
"% done"))
}
# Create new sub-folder and move inadmissible files here
if(move == TRUE){
if(length(not_admissible_name)!=0){
for(i in 1:length(not_admissible_name)){
file_move(not_admissible_name[i], paste(target, "/inadmissible", sep = "", collapse = NULL))
}
}
}
close(pb)
## Create a named list with the admissible reps vector and the which_warnings frame
list(admissible = admissible, not_admissible = not_admissible, admissible_name = admissible_name, not_admissible_name = not_admissible_name, which_warnings = warnings_frame)
}
create_output <- function(x, silent=TRUE, rep_filter= "_rep", residuals, nsims) {
## Packages
packages <- c("expss", "filesstrings")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
files <- x
## Split each file name in 2 after the rep_filter term, save what comes after
title <- files[[1]][[1]]$title
nparam <- nrow(files[[1]]$parameters$unstandardized)
est<-matrix(0,nrow=length(files),ncol=nparam)  #vector of length #outputs
#est_mean <- matrix(0,nrow=1, ncol = 13)
L <- matrix(0,nrow=length(files),ncol=nparam)
U <- matrix(0,nrow=length(files),ncol=nparam)
bias<-matrix(0,nrow=nparam,ncol=1)
for(i in 1:length(files)){
for(d in 1:ncol(est)){
est[i,d]<-as.numeric(files[[i]][[9]][[1]][[3]][d])
L[i,d]<-as.numeric(files[[i]][[9]][[1]][[6]][d])
U[i,d]<-as.numeric(files[[i]][[9]][[1]][[7]][d])
}
DIC <- mean(as.numeric(files[[i]][[7]]$DIC))
}
for(i in 1:length(files)){
rows<-paste(files[[i]][[9]][[1]][[1]],files[[i]][[9]][[1]][[2]])
# files[[i]] <- as.data.frame(files[[i]][[9]][[1]])#[3:8], row.names = files[[i]][[9]][[1]][1])
}
if (residuals == "high"){
bias[3,] <- mean(((as.numeric(est[,3])-0.5)/.5)*100)
bias[4,] <- mean(((as.numeric(est[,4])-2)/2)*100)
bias[10,] <- mean(as.numeric(est[,10])-0)
bias[11,] <- mean(((as.numeric(est[,11])-0.5)/0.5)*100)
Y2residw <- sqrt(mean((est[,3]-0.5)^2))
Etaresidw <- sqrt(mean((est[,4]-2)^2))
Y2residt <- sqrt(mean((est[,10]-0)^2))
sresidt <- sqrt(mean((est[,11]-0.5)^2))
true_value <- c(1.00,0.50,0.50,2.00,1.00,-1.00,1.00,1.00,0.00,0.00,0.50,
0.00,0.00,0.50,0.00)
}
if (residuals == "low"){
bias[3,] <- mean(((as.numeric(est[,3])-0.2)/.2)*100)
bias[4,] <- mean(((as.numeric(est[,4])-1)/1)*100)
bias[10,] <- mean(as.numeric(est[,10])-0)
bias[11,] <- mean(((as.numeric(est[,11])-0.2)/0.2)*100)
Y2residw <- sqrt(mean((est[,3]-0.2)^2))
Etaresidw <- sqrt(mean((est[,4]-1)^2))
Y2residt <- sqrt(mean((est[,10]-0)^2))
sresidt <- sqrt(mean((est[,11]-0.2)^2))
true_value <- c(1.00,0.50,0.20,1.00,1.00,-1.00,1.00,1.00,0.00,0.00,0.20,
0.00,0.00,0.50,0.00)
}
bias[1,] <- "NA"
bias[2,] <- mean(((as.numeric(est[,2])-0.5)/.5)*100)
bias[5,] <- mean(((as.numeric(est[,5])-(1))/1)*100)
bias[6,] <- mean(((as.numeric(est[,6])-(-1))/-1)*100)
bias[7,] <- mean(((as.numeric(est[,7])-(1))/1)*100)
bias[8,] <- mean(((as.numeric(est[,8])-1)/1)*100)
bias[9,] <- mean((as.numeric(est[,9])-0))
bias[12,] <- mean((as.numeric(est[,12])-0))
bias[13,] <- "NA"
bias[14,] <- mean(((as.numeric(est[,14])-0.5)/0.5)*100)
bias[15,] <- "NA"
eta_eta1 <- sqrt(mean((est[,2]-0.5)^2))
s_x2 <- sqrt(mean((est[,5]-(1))^2))
s_x3 <- sqrt(mean((est[,6]-(-1))^2))
s_x4 <- sqrt(mean((est[,7]-(1))^2))
y_x1 <- sqrt(mean((est[,8]-1)^2))
Int_s <- sqrt(mean((est[,9]-0)^2))
# Y2residt <- sqrt(mean((est[,10]-0)^2))
Y2means <- sqrt(mean((est[,10]-0)^2))
Y2vars <- sqrt(mean((est[,12]-0.5)^2))
rmse<-rbind("NA",eta_eta1,Y2residw,Etaresidw,s_x2,s_x3,s_x4,y_x1,Int_s,Y2residt,sresidt,Y2means, "NA",Y2vars, "NA")
est_mean <- colMeans(est)
est <- as.data.frame(cbind(est_mean), row.names = rows)
meanL <- round(colMeans(L), digits = 2)
meanU <- round(colMeans(U), digits = 2)
power <- mean(L>0 | U<0)
CI <- paste0("(",meanL,",", meanU,")")
results <- cbind(true_value,est, "95% CI"=CI, bias, rmse)
convergence <- noquote(paste0(round((length(files)/nsims)*100, digits = 4), "%"))
DIC <- as.data.frame(rbind(DIC,power, convergence), row.names = c("DIC", "Power", "convergence"))
colnames(DIC) <-"Diagnostics"
#  results = apply_labels(results,
#                        true_value = "True Value",
#                        est_mean  = "Estimate",
#                        CI = "95% CI",
#                        bias = "Bias",
#                        rmse = "RMSE")
#  DIC = apply_labels(DIC, )
#print(title)
#print(results)
#print(DIC)
# print(power)
list("Title" = title, "Results" = results, "Diagnostics"=DIC)
}
results("F:/patrice_dissertation/Study1/Cubic/n30/150t/difuse/high/output", file_filter = ".txt", nsims = 800)
sink()
results <- function (target = getwd(), rep_filter = "rep", recursive = FALSE, file_filter = "difuse",
residuals, nsims=NULL)
# residuals = "high" or "low"
# nsims = number of simulations
{
## Check if tidiverse is installed and loaded
packages <- c("tidyverse", "MplusAutomation")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
## Determine whether target is a file or a directory
if (file.exists(target)) {
if (file.info(target)$isdir == TRUE) {
## List all files in directory
files <- list.files(target, recursive=recursive, full.names=TRUE)
## Select files for the correct cell of the simulation (based on file_filter)
cell <- files[str_which(files, file_filter)]
## Select only .out files
files <- cell[str_which(cell, ".out")]
}
else {
## If target is a single output file.
if (nchar(target) >= 4 && !substr(target, nchar(target) - 3, nchar(target)) == ".out")
stop("Specified target is not an output file.\n  Target:", target)
## Assign single file to files
files <- target
}
}
## If neither
else stop("Specified target does not exist.\n  Target: ", target)
if (length(files) == 0) {
warning("No output files detected in this directory.")
return(NULL)
}
## Split each file name in 2 after the rep_filter term, save what comes after
reps <- str_split_fixed(files, "/output/", n=2)[,2]
## Split each file name in 2 after the rep_filter term, save what comes after
reps <- str_split_fixed(reps, rep_filter, n=2)[,1][1]
if (length(nsims) == 0) {
nsims <- length(reps)
#  else { nsims<- nsims
#  }
}
add <- get_admissible(target = target, file_filter = file_filter, rep_filter = rep_filter, recursive = recursive,silent=TRUE)
out<-readModels(target = target, recursive = recursive, quiet = TRUE)
agg <- create_output(out, residuals = residuals, nsims = nsims)
#for(i in 1:legnth(reps))
#{
# Object = get("reps")
# Object[1] = 0
assign(paste0(reps, "add"), add , envir = .GlobalEnv)
x<-assign(paste0(reps, "out"), out , envir = .GlobalEnv)
y <- assign(paste0(reps, "agg"), agg , envir = .GlobalEnv)
#  }
sink("F:/patrice_dissertation/Results.txt", append = TRUE)
return(agg)
sink(file = NULL)
#unlink("F:/patrice_dissertation/Results.txt")
#list(x,y,z)
}
results("F:/patrice_dissertation/Study1/Cubic/n30/150t/difuse/high/output", file_filter = ".txt", nsims = 800)
